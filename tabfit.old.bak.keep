c     28 Feb 2003:  Start to develop ability to fit existing tables
c     with functions that will provide at least a continuous first derivative
c     and often a continuous second derivative.  Do this in the hope that 
c     the Newton numerical solution will be more predictable and controllable. 



C
C
C
      SUBROUTINE   xsecfit
     I                   (STDOUT, STDTAB, TAB, STAT, ZMIN, MESG, SAVOPT,
     I                    OUTOPT, BETOPT,
     M                    NDEP, XST, FTP)
 
C     + + + PURPOSE + + +
c     Compute some fits to the values in a cross-section function table.
c     keep the old arg list for future use!

c     Try the following as the first steps to our ultimate goal:  a new set
c     of cross-section function tables numbered 30-35 that mimic the general 
c     pattern of 20-25 but provide a smoother representation.  Note the 
c     representation is smoother but may not be more accurate.  Questions of 
c     of accuracy are difficult when dealing with natural channels and all of the
c     problems of defining a basis for truth.  We are seeking some degree of 
c     concistency, especially where it appears to be important, and also 
c     a higher degree of mathematical smoothness, defined in terms of derivative
c     continuity.  

c     1. Fit the tablulated top width using a variation-limited cubic Hermite piecewise 
c        polynomial (VLCHPP).

c     2. Compute the area and first moment of area by exact integration of the 
c        the results of 1.  Compare to the values comuputed from the cross section. 
c        We need some idea of the differences between the two results.  If they are
c        smaller than about 5 per cent, then we should have little problem.

c     3. Fit the sqrt of conveyance using a VLCHPP.
c     4. Fit alpha and beta with a VLCHPP
c     5.  Fit MA and MQ with a VLCHPP
c     6. Delay action on Qc because we may not need its derivative in FEQ at this
c        time.

      IMPLICIT NONE
C     + + + PARAMETERS + + +
      INCLUDE 'arsize.prm'
 
C     + + + DUMMY ARGUMENTS + + +
      INTEGER FTP, MESG, NDEP, STDOUT, STDTAB, TAB
      REAL STAT, XST(PMXPNT,PMXELM), ZMIN
      CHARACTER BETOPT*8, OUTOPT*8, SAVOPT*8
 
C     + + +DUMMY ARGUMENT DEFINITIONS + + +
C     STDOUT - Fortran unit number for user output and messages
C     STDTAB - Fortran unit number for output of function tables
C     TAB    - Table number
C     STAT   - Station value
C     ZMIN   - Minimum elevation
C     MESG   - Flag for decreasing conveyance message appearance
C     SAVOPT - Function table saving option
C     OUTOPT - Output option for the table file for cross section function
C               tables
C     BETOPT - Option for computing flux coefficients and critical flow
C     NDEP   - Number of depth values
C     XST    - Storage table for various elements of cross section
C     FTP    - next open location in the function table storage
 
C     + + + COMMON BLOCKS + + +
      INCLUDE 'ftable.cmn'
      INCLUDE 'grvcom.cmn'
      INCLUDE 'xtadd.cmn'
 
C     + + + LOCAL PARAMETERS + + +
      INTEGER NSAVE
      PARAMETER(NSAVE=8)
 
C     + + + SAVED VALUES + + +
      INTEGER SOVAL(NSAVE), TYPVEC(NSAVE)
      CHARACTER SOTAB(NSAVE)*8
      SAVE SOTAB, SOVAL, TYPVEC
 
C     + + + LOCAL VARIABLES + + +
      INTEGER FLAG, I, IT,  L, N, NSTORE, TYPE, EFLAG
      REAL DROP, MONE, OLDK, MXSLOT

      integer lcode, rcode
      integer adjloc(pmxpnt)

      real*8 h, lval, rval
      real*8 t(pmxpnt), dtdy(pmxpnt), a(pmxpnt), j(pmxpnt), kh(pmxpnt),
     a     dkhdy(pmxpnt),alpha(pmxpnt), dalphady(pmxpnt), 
     b     beta(pmxpnt), dbetady(pmxpnt),  ma(pmxpnt), dmady(pmxpnt), 
     c     mq(pmxpnt), dmqdy(pmxpnt)

      real*8 y(pmxpnt), f(pmxpnt), m(pmxpnt)

      character flag1*1
      CHARACTER ACHR*8, JCHR*8, KCHR*8, QCCHR*8, TCHR*8
 
C     + + + INTRINSICS + + +
      INTRINSIC ABS
 
C     + + + EXTERNAL FUNCTIONS + + +
      external VLCHPP
C     + + + EXTERNAL NAMES + + +
 
C     + + + DATA INITIALIZATIONS + + +
      DATA
     1SOTAB /'SAVE1   ','SAVE12  ','SAVE20  ','SAVE21  ','SAVE22  ',
     A       'SAVE23  ','SAVE24  ','SAVE25  '/
      DATA
     1SOVAL /         6,         8,         5,         6,         8,
     A                7,         8,        10/
      DATA
     1TYPVEC/        21,         22,         20,         21,         22,
     A               23,        24,        25/
 
C     + + + OUTPUT FORMATS + + +
50    format(/,' Comparison at tabulated points')
52    format('         y     dT/dy          T         A   reldifA',
     a       '         J   reldifJ')
54    format(f10.3,f10.3,a1,f10.2,f10.2,f10.3,f10.2,f10.3)
C***********************************************************************
      EFLAG = 0
 
C     FILL IN THE VELOCITY DISTRIBUTION COEFFICIENTS AT DEPTH 0.0
C     AND CRITICAL FLOW AT ZERO DEPTH.
      XST(1,6) = XST(1+1,6)
      XST(1,7) = XST(1+1,7)
      XST(1,13) = 0.0
 
 
C     Added May 22, 1998: definition of XSV(*) contents
C     Offset    Value
C     1         Maximum depth-y
C     2         Top width
C     3         Area
C     4         First moment of area about water surface
C     5         Square root of conveyance
C     6         Beta
C     7         Alpha
C     8         dBeta/dy
C     9         dAlpha/dy
C     10        Critical flow from momentum
C     11        Critical flow from energy
C     12        Critcal flow assuming Alpha=beta=1
C     13        Critical flow that is selected by user: 10, 11, or 12
C     14        MA- correction of volumes for sinuousity
C     15        MQ- correction of momentum for sinuosity
C     16        Total wetted perimeter- added May 22, 1998
C     17        Average Manning's n value for the cross section


c     Compute a fit to the top width to see how it does.  Transfer the data
c     to the working variables. 

      n = ndep
      do i=1,n
        y(i) = dble(xst(i,1))
        t(i) = dble(xst(i,2))
        kh(i) = dble(xst(i,5))
        alpha(i) = dble(xst(i,7))
        beta(i) = dble(xst(i,6))
        ma(i) = dble(xst(i,14))
        mq(i) = dble(xst(i,15))
      end do

c     The code values for vlchpp which calls spline are:
c        code       Meaning of val
c       -------     --------------------------
c          1         first derivative at the given end
c          2         second derivative at the given end
c          3          0 < val  < 1
c   In terms of the "beam" theory behind the idea of a spline:
c   code 1 provides a cantilever support a the end.  That is,
c   the beam has a fixed slope there.  Code 2 is for a simple
c   support, the beam can rotate there as required.  The third
c   case for the left end places a simple support at location

c      xa  = (x(1) - val*x(2))/(1 - val)

c     and requiring that the entire curve from xa to x(2) be a 
c     cubic.  A typical value of val is 0.5.

c     To force the top width to be a close approximation of the 
c     assumption in its computations, we will force the 1st derivative
c     at each end to match the local slope at that point.

c      lcode = 1
c      lval = (t(2) - t(1))/(y(2) - y(1))
c
c      rcode = 1
c      rval = (t(n) - t(n-1))/(y(n) - y(n-1))
c
c      call  vlchpp
c     i            (stdout, n, y, t, lcode, lval, rcode, rval,
c     o                dtdy, adjloc)
c
c      
cc     Compute area and first moment of area from the resulting pp
c
c      a(1) = 0.d0
c      j(1) = 0.d0
c      do i=2,n
c        h = y(i) - y(i-1)
c
c        a(i) = a(i-1) +  0.5d0*h*( t(i-1) + t(i) 
c     a                + h*(dtdy(i-1) - dtdy(i))/6.d0 )
c
c        j(i) = j(i-1) + 0.5d0*h*( a(i-1) + a(i) 
c     a            + h*((t(i-1) - t(i))/5.d0 
c     b            + h*(dtdy(i-1) + dtdy(i))/60.d0))
c
c      end do
c
c      write(stdout,50)
c      write(stdout,52)
c
c      do i=1,n
c        if(adjloc(i).eq.0) then
c          flag1 = ' '
c        else
c          flag1 = '*'
c        endif
c        if(i > 1) then
c          write(stdout,54) y(i), dtdy(i), flag1, t(i), a(i), 
c     a     (a(i) - xst(i,3))/xst(i,3), j(i), (j(i) - xst(i,4))/xst(i,4)
c        else
c          write(stdout,54) y(i), dtdy(i), flag1, t(i), a(i), 
c     a     0.0, j(i), 0.0
c        endif
c      end do


c     try sqrt of conveyance

      lcode = 3
      lval = 0.5d0

      rcode = 3
      rval = 0.5d0

      call  vlchpp
     i            (stdout, n, y, kh, lcode, lval, rcode, rval,
     o                dkhdy, adjloc)

      write(stdout,60)
60    format(/,' Results for sqrt of conveyance')
      write(stdout,62) 
62    format('         y        kh     dkhdy')
      do i=1,n
        if(adjloc(i).eq.0) then
          flag1 = ' '
        else
          flag1 = '*'
        endif
        write(stdout,64) y(i), kh(i), dkhdy(i), flag1
64    format(f10.3,f10.1,f10.3,a1)
      end do


c     try the rest using spline fit without variation limitation.

      lcode = 3
      lval = 0.5d0

      rcode = 3
      rval = 0.5d0

      call  spline
     i            (stdout, y, alpha, n, lcode, lval, rcode, rval,
     o                dalphady)
      call  spline
     i            (stdout, y, beta, n, lcode, lval, rcode, rval,
     o                dbetady)
      call  spline
     i            (stdout, y, ma, n, lcode, lval, rcode, rval,
     o                dmady)
      call  spline
     i            (stdout, y, mq, n, lcode, lval, rcode, rval,
     o                dmqdy)

      write(stdout,70)
70    format(/,' Results for rest')
      write(stdout,72) 
72    format('         y     alpha  dalphady      beta   dbetady',
     a    '        ma     dmady        mq     dmqdy')
      do i=1,n
        write(stdout,74) y(i), alpha(i), dalphady(i), beta(i), 
     a   dbetady(i), ma(i), dmady(i), mq(i), dmqdy(i)
74    format(f10.3,f10.4,f10.5,f10.4,f10.5,f10.4,f10.5,f10.4,f10.5)
      end do

      return
      end


      

C
C
C
      SUBROUTINE   twodfit
     I                   (STDOUT, STDTAB, TABLE, LABEL, NHU, NFRAC,
     I                    HUVEC, FDROP, PFDVEC, Q, HDATUM,
     I                    TYPE, SOURCE, deltaz,
     m                    ftp,
     O                    EFLAG)
 
C     + + + PURPOSE + + +
C     Experiment with fitting 2-d tables of type 13.
 
      IMPLICIT NONE

C     + + + PARAMETERS + + +
      INCLUDE 'arsize.prm'
 
C     + + + DUMMY ARGUMENTS + + +
      INTEGER EFLAG, FTP, NFRAC, NHU, STDOUT, STDTAB, TABLE, TYPE
      REAL FDROP(PMXNHU), HDATUM, HUVEC(PMXNHU), PFDVEC(PMXFRC),
     A     Q(PMXNHU,PMXFRC), deltaz
      CHARACTER LABEL*50, SOURCE*8
 
C     + + +DUMMY ARGUMENT DEFINITIONS + + +
C     STDOUT - Fortran unit number for user output and messages
C     STDTAB - Fortran unit number for output of function tables
C     TABLE  - Table number
C     LABEL  - Label for identification
C     NHU    - Number of upstream heads
C     NFRAC  - Number of fractions for defining partial free drop
C     HUVEC  - Vector of upstream heads
C     FDROP  - Free drop values
C     PFDVEC - Partial free drop vector
C     Q      - Flowrate
C     HDATUM - Datum for measuring head
C     TYPE   - Table type.
C     SOURCE - source for the table.
C     EFLAG  - Error flag: EFLAG=0-no errors; else one or more errors
 
   

C     + + + SAVED VALUES + + +
      INTEGER IOFF
      SAVE IOFF
 
C     + + + LOCAL VARIABLES + + +
      INTEGER I, J, K, L, KNT, LIM, ihu, ipfd, free
      real ed, eu, qt, dqted, dqteu, dfl, dfm, dfr, dqpfd,
     a     qtl, qtm, qtr, diff, spfd
      CHARACTER DUMMY*7, LINE(10)*7, TABID*16
 
      integer n
      real*8 
     b       huall(pmxnhu+1),
     e       freedrop(pmxnhu+1),
     f       qmat(pmxnhu+1,pmxfrc), pfd(pmxfrc)
C***********************************************************************
      IF(TYPE.EQ.6) THEN
c       do nothing
      ELSEIF(TYPE.EQ.13) THEN

c       Need to add zero upstream head to the mix.  Flow is zero 
c       but some partial derivatives are not!
        huall(1) = 0.d0
        freedrop(1) = 0.d0
c        freedrop(1) = dble(deltaz)
        n = nhu + 1
        do i=1,nhu
          huall(i+1) = huvec(i)
          freedrop(i+1) = fdrop(i)
        end do
      
        do ipfd=1,nfrac
          pfd(ipfd) = dble(pfdvec(ipfd))
        end do

        do ihu=1,n
          if(ihu.eq.1) then
c           special case.
            do ipfd=1,nfrac
              qmat(ihu,ipfd) = 0.d0
            end do
          else
            do ipfd=1,nfrac
              qmat(ihu,ipfd) = dble(q(ihu-1,ipfd))
            end do
          endif
        end do

        call   twodtabfit
     I                   (STDOUT, n, nfrac, pmxnhu+1, hdatum,
     i                    huall, freedrop, pfd, qmat,
     I                    SOURCE,
     m                    ftp,
     O                    EFLAG)


      endif
      RETURN
      END


c
c
c
      subroutine store43a(stdout, maxrow, nhu, npfd, huall, freedrop,
     i            pfdropphu, pfd, qmat, pqppfd, pqphu, ppQppfdphu, ftp,
     i            hdatum )

c     Store table of type43 in the first form. 

      integer npfd, maxrow, stdout, ftp
      real hdatum
      real*8 huall(nhu),freedrop(nhu), pfdropphu(nhu),
     a  pqppfd(maxrow,npfd), pqphu(maxrow,npfd), 
     b  ppQppfdphu(maxrow,npfd), qmat(maxrow,npfd),
     c  pfd(npfd)


      include 'arsize.prm'
      include 'ftable.cmn'

c     Local

      integer i, j, ip, phu, lhu, ppfd, qoffset, it, pfq

c***********************************************************************
      ip = ftp
      write(stdout,*) ' store43a: ftp=',ftp,' on entry.'
c     Set head datum
      ftab(ip) = hdatum

c     Set table number as a dummy for now
      itab(ip+1) = 7123
      itab(ip+2) = 43
      
c     pointer to first upstream head
      phu = ip + 10
      itab(ip+3) = phu
      itab(ip+4) = phu

c     We store 4 items for each upstream head.  
      
      ppfd = phu + 4*nhu
      itab(ip+5) = ppfd
      itab(ip+6) = ppfd

c     compute the offset between the flow at pfd=0 and pfd=1 for each 
c     ups head. 
      qoffset = 4*(npfd - 1)
      itab(ip+7) = qoffset

c     set the maximum upstream head
      ftab(ip+9) = sngl(huall(nhu))

c     store the information for upstream heads
      it = phu
      ppfd = phu + 4*nhu
      pfq = ppfd + npfd + qoffset
      do i=1,nhu
        ftab(it) = sngl(huall(i))
        ftab(it+1) = sngl(freedrop(i))
        ftab(it+2) = sngl(pfdropphu(i))
        itab(it+3) =  pfq
        it = it + 4
c       update to zero flow for the next head
        pfq = pfq + 4
c       point to free flow for the next head
        pfq = pfq + qoffset
      end do       


c     store the partial free drops
      it = ppfd
      do i=1,npfd
        ftab(it) = pfd(i)
        it = it + 1
      end do


c     store the flow and derivatives
      do i=1,nhu
        do j=1,npfd
          ftab(it) = qmat(i,j)
          ftab(it+1) = pqppfd(i,j)
          ftab(it+2) = pqphu(i,j)
          ftab(it+3) = ppQppfdphu(i,j)
          it = it + 4
        end do
      end do

      return
      end
      

C
C
C
      SUBROUTINE   twodtabfit
     I                   (STDOUT, nhu, npfd, maxrow, hdatum,
     i                    huall, freedrop, pfd, qmat,
     I                    SOURCE,
     m                    ftp,
     O                    EFLAG)
 
C     + + + PURPOSE + + +
C     Experiment with fitting 2-d tables of type 13.
 
      IMPLICIT NONE

C     + + + PARAMETERS + + +
      INCLUDE 'arsize.prm'
 
C     + + + DUMMY ARGUMENTS + + +
      INTEGER EFLAG, FTP,  TYPE, nhu, npfd, maxrow, stdout
      real hdatum

      real*8 huall(nhu), freedrop(nhu), pfd(npfd),
     a       qmat(maxrow,npfd), deltaz

      CHARACTER  SOURCE*8
 
C     + + + LOCAL VARIABLES + + +
      INTEGER I, ihu, ipfd, free, it, nadj, splineok
      real ed, eu, qt, dqted, dqteu, dfl, dfm, dfr, dqpfd,
     a     qtl, qtm, qtr, diff, spfd
 
      integer lcode, rcode, nex, adjloc(pmxfrc), ifac
      real*8 lval, rval, fac, maxrerr, h, t_at_ex(2), qex,
     a     ql, qr, ml, mr
      real*8 x(nhu), f(nhu), m(nhu),
     a       pqppfd(maxrow,npfd),
     b       pqphu(maxrow,npfd), 
     c       ppQppfdphu(maxrow,npfd),
     d       ppQphuppfd(maxrow,npfd),
     e       pfdropphu(nhu), checkq(pmxfrc)
     f       
      character pqppfdadj(maxrow,npfd)*1, pqphuadj(maxrow,npfd)*1

c     note: ppQppfdphu is the mixed partial derivative of flow first with 
c     respect to hu and then wrt pfd.  ppQphuppfd is the mixed partial 
c     of flow first wrt pfd and then wrt hu.  We want to test if these 
c     are equal if no variation limitation is imposed. 


 
C***********************************************************************

      lcode = 3
      lval = 0.5d0
      rcode = 3
      rval = 0.5d0
      

      
c     fit free drop versus ups head
      call spline
     i        (stdout, huall, freedrop, nhu ,lcode, lval, rcode, rval,
     o           pfdropphu)

      write(stdout,70) 
70    format(' Results for free drop versus upstream head.',/,
     a  '  Ups Head  freedrop  dfdrop/dhu')
      do ihu=1,nhu
        write(stdout,72) huall(ihu), freedrop(ihu), pfdropphu(ihu)
72    format(f10.3,f10.4,f12.5)
      end do
      write(stdout,*) ' '

c     compute the 1-d spline fits for each upstream head.  This gives
c     the partials of flow wrt to pfd

c     Impose what seems like reasonable end conditions:
c     On the left, that is for pfd=0, that is, complete submergence
c     to zero flow, we know that the derivative is infinite.  However, 
c     we will not attempt to match that.  Instead we will just use 
c     the extension, maybe same as not-a-knot, end condition.
c     At the right end, that is, pfd=1.0, theory implies that the 
c     derivative should be zero.  However, in reality some of the 
c     equation/coefficient sets used do not attain this behavior with 
c     any precision.  None-the-less we will experiment with imposing it. 

c     Anything other than the apparent equivalent of not-a-knot leads
c     to inconsitent results on the mixed partials.
      lcode = 3
      lval = 0.5d0
      rcode = 3
      rval = 0.5d0

      splineok = 0
      do ihu=1,nhu
        do ipfd=1,npfd
          f(ipfd) =  qmat(ihu,ipfd)
        end do
        call spline
     i          (stdout, pfd, f, npfd ,lcode, lval, rcode, rval,
     o              m)
        call vrlim
     i            (npfd, pfd, f,
     m             m,
     o             nadj, adjloc)
        if(nadj.gt.0) then
          splineok = splineok + nadj
        endif


c       store results in matrix for later output and analysis 
        do ipfd=1,npfd
          pqppfd(ihu,ipfd) = m(ipfd)
          if(adjloc(ipfd).eq.1) then 
            pqppfdadj(ihu,ipfd) = '*'
          else
            pqppfdadj(ihu,ipfd) = ' '
          endif
        end do
      end do

c     Now do a fit for pfd constant.   Note the Q(*,*) does not
c     contain the value for zero upstream head.  huvec(*) also does
c     not contain zero head.  We have add these.  Use n for the number
c     of upstream heads include 0.0.  The lookup table must also contain
c     this point because the flow may be zero but the derivative wrt to hu
c     with pfd held fixed is not zero.        


c     In some cases the partial wrt to hu with pfd held fixed should be 
c     zero at the left end.  EMBANKQ, CHANRAT, CULVERT, and even ORIFICE
c     all start out at small heads as weir-like flow.  Thus if pfd=1.0,
c     free flow, it is clear that the partial wrt to hu should be zero.
c     We need to do some checking on limits to see what the meaning of 
c     the partial wrt to hu is when hu = 0 and the pfd < 1.0.  

c     This change destroys the equality of the mixed partials.  We will
c     have to be muc more subtle in making these changes!  The choice of
c     end condition must be made in some consistent pattern to maintain
c     the desired outcome of equality in the mixed partials from the 
c     two sources. 
      lcode = 1
      lval = 0.0d0
      rcode = 3
      rval = 0.5d0

      do ipfd=1,npfd

        do ihu=1,nhu
          f(ihu) = qmat(ihu,ipfd)
        end do

        call spline
     i          (stdout, huall, f, nhu, lcode, lval, rcode, rval,
     o              m)
        call vrlim
     i            (nhu, huall, f,
     m             m,
     o             nadj, adjloc)
        if(nadj.gt.0) then
          splineok = splineok + nadj
        endif

        do ihu=1,nhu
          pqphu(ihu,ipfd) = m(ihu)
          if(adjloc(ihu).eq.1) then
            pqphuadj(ihu,ipfd) = '*'
          else
            pqphuadj(ihu,ipfd) = ' '
          endif
        end do
      end do

c     For the mixed partials, we have no good theory to guide us 
c     in what conditions to use.  Therefore, we use the 
c     extension concept with a weight of 0.5. 
      lcode = 3
      lval = 0.5d0
      rcode = 3
      rval = 0.5d0

c     Now compute the mixed partial derivatives.  
c     Do those wrt to pfd. 
    
      do ihu=1,nhu
        do ipfd=1,npfd
          f(ipfd) = pqphu(ihu,ipfd)
        end do
        call spline
     i          (stdout, pfd, f, npfd, lcode, lval, rcode, rval,
     o              m)
        do ipfd=1,npfd
          ppQppfdphu(ihu,ipfd) = m(ipfd)
        end do
      end do

c     Do those wrt to hu
      lcode = 1
      lval = 0.d0
      rcode = 3
      rval = 0.5d0
      do ipfd=1,npfd
        do ihu=1,nhu
          f(ihu) = pqppfd(ihu,ipfd)
        end do

        call spline
     i          (stdout, huall, f, nhu, lcode, lval, rcode, rval,
     o              m)
        do ihu=1,nhu
          ppQphuppfd(ihu,ipfd) = m(ihu)
        end do
      end do
      


      
      if(splineok.eq.0) then
        write(stdout,*) ' Two-D table is a bi-cubic spline'
      else
        write(stdout,*) ' Two-D table is a bi-cubic Hermite pp'
        fac = float(splineok)/float(2*nhu*npfd)
        write(stdout,1000) splineok, fac*100. 
1000  format(5x,' There were',i5,' derivatives adjusted',
     a'      representing ',f7.4,' per cent of the total.')
      endif

      do ihu=1,nhu
        if(2.lt.1) then
          write(stdout,50) (pfd(i), i=1,npfd)
50    format(/,'Dump of results-----------------------------pfd values',
     a'-----------------------------------------------------------',/,
     a'hu/   q-->',25f10.6)

          write(stdout,52) huall(ihu), (qmat(ihu,ipfd), ipfd=1,npfd) 
c     a                (checkq(ipfd), ipfd=1,it-1)
52    format(f10.3,40(1pe10.4e1))
        
          write(stdout,54) 
     a    (pqppfd(ihu,ipfd), pqppfdadj(ihu,ipfd), ipfd=1,npfd)
54    format('pq/ppfd   ',25(1pe9.3e1,a1))

          write(stdout,56) 
     a    (pqphu(ihu,ipfd), pqphuadj(ihu,ipfd), ipfd=1,npfd)
56    format('pq/phu    ',25(1pe9.3e1,a1))

          write(stdout,60) (ppQppfdphu(ihu,ipfd), ipfd=1,npfd)
60    format('ppQ/ppfdph',25(1pe10.4e1))

          write(stdout,62) (ppQphuppfd(ihu,ipfd), ipfd=1,npfd)
62    format('ppQ/phppfd',25(1pe10.4e1))
        endif
      end do

c     store the table in the function-table structure but do not update 
c     the pointer.  We will do some tests of this table and then the next
c     table without retaining information in function-table structure. 
c     force lookup to be on heads. 
      hdatum = 0.0

      call store43a(stdout, pmxnhu+1, nhu, npfd, huall, freedrop,
     i          pfdropphu, pfd, qmat, pqppfd, pqphu, ppQphuppfd, ftp,
     i          hdatum )
c      call store43a(stdout, pmxnhu+1, nhu, npfd, huall, freedrop,
c     i          pfdropphu, pfd, qmat, pqppfd, pqphu, ppQppfdphu, ftp,
c     i          hdatum )

c      write(stdout,90) 
c90    format(/,' Testing lookup',/,
c     a '        hu        hd       pfd     qlook         q     qdiff',
c     b '     dqteu     ddiff')
 
c90    format(/,' Testing lookup',/,
c     a'       pfd        hu      diff         dfl',
c     b'         dfm         dfr')       

      maxrerr = -1.e30
      do ifac=1,20
      fac = dble(ifac)/20.d0
      do ihu=2,nhu
        eu = (1.d0 - fac)*huall(ihu-1) + fac*huall(ihu)
        ed = -10.0
        do ipfd=2,npfd

          call TDLK43
     I           (STDOUT, ftp, 43, 0, 0.0, ED, EU, sngl(pfd(ipfd-1)),
     I            hdatum,
     O            qtl, dqted, dqteu, dfl, free)

          spfd = 0.5*(pfd(ipfd) + pfd(ipfd-1))
          
          call TDLK43
     I           (STDOUT, ftp, 43, 0, 0.0, ED, EU, spfd,
     I            hdatum,
     O            qtm, dqted, dqteu, dfm, free)


          call TDLK43
     I           (STDOUT, ftp, 43, 0, 0.0, ED, EU, sngl(pfd(ipfd)),
     I            hdatum,
     O            qtr, dqted, dqteu, dfr, free)

          diff = (pfd(ipfd) - pfd(ipfd-1))*
     a           (dfl + 4.*dfm + dfr)/6.0 -  (qtr - qtl)
          diff = diff/(max(abs(qtr-qtl),0.005))
          maxrerr = max(maxrerr, diff)
        end do
      end do
      end do
      write(stdout,94) maxrerr
94    format(/,' max relative error=',1pe10.3x)


      maxrerr = -1.e30
      fac = 0.7d0
      do ifac=1,20
      fac = dble(ifac)/20.d0
      do ipfd=2,npfd
        spfd = (1.d0 - fac)*pfd(ipfd-1) + fac*pfd(ipfd)
        ed = -10.0
        do ihu=2,nhu

          eu = sngl(huall(ihu-1))
          call TDLK43
     I      (STDOUT, ftp, 43, 0, 0.0, ED, eu, spfd,
     I       hdatum,
     O       qtl, dqted, dfl, dqpfd, free)

          eu = sngl( 0.5*(huall(ihu-1) + huall(ihu)))
          
          call TDLK43
     I           (STDOUT, ftp, 43, 0, 0.0, ED, EU, spfd,
     I            hdatum,
     O            qtm, dqted, dfm, dqpfd, free)


          eu = sngl(huall(ihu))
          call TDLK43
     I           (STDOUT, ftp, 43, 0, 0.0, ED, EU, spfd,
     I            hdatum,
     O            qtr, dqted, dfr, dqpfd, free)

          diff = (huall(ihu) - huall(ihu-1))*
     a           (dfl + 4.*dfm + dfr)/6.0 -  (qtr - qtl)
          diff = diff/(max(abs(qtr-qtl),0.005))
          maxrerr = max(maxrerr, diff)
        end do
      end do
      end do
      write(stdout,94) maxrerr
     

      RETURN
      END
c
c
c
      subroutine locate_extreme_point(stdout, yl, yr, ml, mr, h,
     o                            nex, t_at_ex)

c     Given the function values, yl, yr, and the derivative values, 
c     ml, mr, at each end of an interval, h, compute the location of
c     extreme point for the cubic that matches the four data points. 
c     Return the extreme point in terms of the relative distance from
c     the left end point.  

      implicit none

      integer nex, stdout

      real*8 yl, yr, ml, mr, h, t_at_ex(2)

c     Local

      real*8 a, b, c, t1, t2

c***********************************************************************

      c = h*ml

      b = 2.*( (-2.*ml - mr)*h + 3.*(yr - yl))

      a = 3.*(h*(ml + mr) - 2.*(yr - yl))

      if(b*b - 4.*a*c.lt.0.d0) then
c        write(stdout,*) ' Imaginary solution in locate_extreme_point'
        nex = 0
        
        return
      endif

      if(a.eq.0.d0) then
        if(b.ne.0.d0) then
          t1 = -c/b
          t2 = -1.0
        else
c          write(stdout,*) 
c     a 'both a and b are zero in locate_extreme_point'
c          write(stdout,50) yl, yr, ml, mr, h
c50    format(' ql=',1pe12.5,' qr=',1pe12.5,' ml=',1pe12.5,
c     a       ' mr=',1pe12.5,' h=',f10.4)
c          stop 'Abnormal stop. Bug found.'
          nex = 0
          return
        endif
      else
c       a ne to zero here!
        if(c.eq.0.d0) then
          t1 = -b/a
          t2 = 0.d0
        else
c         neither a nor c are zero here. 
          if(b.lt.0.d0) then
            t1 = (-b + sqrt(b*b - 4.*a*c))/(2.*a)
            t2 =  2.*c/(-b + sqrt(b*b - 4.*a*c))
          else
            t1 = 2.*c/(-b - sqrt(b*b -4.*a*c))
            t2 = (-b - sqrt(b*b - 4.*a*c))/(2.*a)
          endif
        endif
      endif
      if(t1.ge.0.d0.and.t1.le.1.0d0) then
        nex = 1
        t_at_ex(nex) = t1
      else
        nex = 0
      endif
      if(t2.ge.0.d0.and.t2.le.1.0d0) then
        nex = nex + 1
        t_at_ex(nex) = t2
      endif

      
      return
      end

      subroutine compute_extreme(yl, yr, ml, mr, h, t,
     o                       yex)

c     Compute an extreme value at the lcoation found in locate_extreme_value

      implicit none

      real*8 yl, yr, ml, mr, h, t, yex

c     Local
      real*8 flp, frp, fl, fr
c***********************************************************************        

c     compute factors on left and right derivative. 
      flp = (1.0 - t)*t*h
      frp = -flp*t
      flp = flp*(1.0 - t)
c     compute factors on left and right function value
      fl = 2.*t + 1.0
      fr = (4.0 - fl)*t*t
      fl = fl*(1.0 - t)**2

      yex = flp*ml + frp*mr + fl*yl + fr*yr

      return
      end      
